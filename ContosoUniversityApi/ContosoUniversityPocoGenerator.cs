// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.co.uk/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Registered to: Chad Yeh
// Company      : Chad Yeh
// Licence Type : Commercial
// Licences     : 1
// Valid until  : 12 十二月 2020
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Connection String Name: "MyDbContext"
//     Connection String:      "Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=ContosoUniversity;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express
// Database Version       : 13.0.4001.0

// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace ContosoUniversityApi
{
    #region Database context interface

    public interface IMyDbContext : IDisposable
    {
        DbSet<Course> Courses { get; set; } // Course
        DbSet<CourseInstructor> CourseInstructors { get; set; } // CourseInstructor
        DbSet<Department> Departments { get; set; } // Department
        DbSet<Enrollment> Enrollments { get; set; } // Enrollment
        DbSet<OfficeAssignment> OfficeAssignments { get; set; } // OfficeAssignment
        DbSet<Person> People { get; set; } // Person
        DbSet<VwCourseStudent> VwCourseStudents { get; set; } // vwCourseStudents
        DbSet<VwCourseStudentCount> VwCourseStudentCounts { get; set; } // vwCourseStudentCount
        DbSet<VwDepartmentCourseCount> VwDepartmentCourseCounts { get; set; } // vwDepartmentCourseCount

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int DepartmentDelete(int? departmentId, byte[] rowVersionOriginal);
        // DepartmentDeleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, DateTime? startDate, int? instructorId);
        List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, DateTime? startDate, int? instructorId, out int procResult);
        Task<List<DepartmentInsertReturnModel>> DepartmentInsertAsync(string name, decimal? budget, DateTime? startDate, int? instructorId);

        List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, DateTime? startDate, int? instructorId, byte[] rowVersionOriginal);
        List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, DateTime? startDate, int? instructorId, byte[] rowVersionOriginal, out int procResult);
        Task<List<DepartmentUpdateReturnModel>> DepartmentUpdateAsync(int? departmentId, string name, decimal? budget, DateTime? startDate, int? instructorId, byte[] rowVersionOriginal);

    }

    #endregion

    #region Database context

    public class MyDbContext : DbContext, IMyDbContext
    {
        private readonly IConfiguration _configuration;

        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public MyDbContext(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public DbSet<Course> Courses { get; set; } // Course
        public DbSet<CourseInstructor> CourseInstructors { get; set; } // CourseInstructor
        public DbSet<Department> Departments { get; set; } // Department
        public DbSet<Enrollment> Enrollments { get; set; } // Enrollment
        public DbSet<OfficeAssignment> OfficeAssignments { get; set; } // OfficeAssignment
        public DbSet<Person> People { get; set; } // Person
        public DbSet<VwCourseStudent> VwCourseStudents { get; set; } // vwCourseStudents
        public DbSet<VwCourseStudentCount> VwCourseStudentCounts { get; set; } // vwCourseStudentCount
        public DbSet<VwDepartmentCourseCount> VwDepartmentCourseCounts { get; set; } // vwDepartmentCourseCount

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured && _configuration != null)
            {
                optionsBuilder.UseSqlServer(_configuration.GetConnectionString(@"MyDbContext"));
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new CourseConfiguration());
            modelBuilder.ApplyConfiguration(new CourseInstructorConfiguration());
            modelBuilder.ApplyConfiguration(new DepartmentConfiguration());
            modelBuilder.ApplyConfiguration(new EnrollmentConfiguration());
            modelBuilder.ApplyConfiguration(new OfficeAssignmentConfiguration());
            modelBuilder.ApplyConfiguration(new PersonConfiguration());
            modelBuilder.ApplyConfiguration(new VwCourseStudentConfiguration());
            modelBuilder.ApplyConfiguration(new VwCourseStudentCountConfiguration());
            modelBuilder.ApplyConfiguration(new VwDepartmentCourseCountConfiguration());

            modelBuilder.Entity<DepartmentInsertReturnModel>().HasNoKey();
            modelBuilder.Entity<DepartmentUpdateReturnModel>().HasNoKey();
        }


        // Stored Procedures
        public int DepartmentDelete(int? departmentId, byte[] rowVersionOriginal)
        {
            var departmentIdParam = new SqlParameter { ParameterName = "@DepartmentID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = departmentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!departmentId.HasValue)
                departmentIdParam.Value = DBNull.Value;

            var rowVersionOriginalParam = new SqlParameter { ParameterName = "@RowVersion_Original", SqlDbType = SqlDbType.Timestamp, Direction = ParameterDirection.Input, Value = rowVersionOriginal };
            if (rowVersionOriginalParam.Value == null)
                rowVersionOriginalParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[Department_Delete] @DepartmentID, @RowVersion_Original", departmentIdParam, rowVersionOriginalParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // DepartmentDeleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, DateTime? startDate, int? instructorId)
        {
            int procResult;
            return DepartmentInsert(name, budget, startDate, instructorId, out procResult);
        }

        public List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, DateTime? startDate, int? instructorId, out int procResult)
        {
            var nameParam = new SqlParameter { ParameterName = "@Name", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = DBNull.Value;

            var budgetParam = new SqlParameter { ParameterName = "@Budget", SqlDbType = SqlDbType.Money, Direction = ParameterDirection.Input, Value = budget.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!budget.HasValue)
                budgetParam.Value = DBNull.Value;

            var startDateParam = new SqlParameter { ParameterName = "@StartDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = DBNull.Value;

            var instructorIdParam = new SqlParameter { ParameterName = "@InstructorID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = instructorId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!instructorId.HasValue)
                instructorIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[Department_Insert] @Name, @Budget, @StartDate, @InstructorID";
            var procResultData = Set<DepartmentInsertReturnModel>()
                .FromSqlRaw(sqlCommand, nameParam, budgetParam, startDateParam, instructorIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DepartmentInsertReturnModel>> DepartmentInsertAsync(string name, decimal? budget, DateTime? startDate, int? instructorId)
        {
            var nameParam = new SqlParameter { ParameterName = "@Name", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = DBNull.Value;

            var budgetParam = new SqlParameter { ParameterName = "@Budget", SqlDbType = SqlDbType.Money, Direction = ParameterDirection.Input, Value = budget.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!budget.HasValue)
                budgetParam.Value = DBNull.Value;

            var startDateParam = new SqlParameter { ParameterName = "@StartDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = DBNull.Value;

            var instructorIdParam = new SqlParameter { ParameterName = "@InstructorID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = instructorId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!instructorId.HasValue)
                instructorIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[Department_Insert] @Name, @Budget, @StartDate, @InstructorID";
            var procResultData = await Set<DepartmentInsertReturnModel>()
                .FromSqlRaw(sqlCommand, nameParam, budgetParam, startDateParam, instructorIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, DateTime? startDate, int? instructorId, byte[] rowVersionOriginal)
        {
            int procResult;
            return DepartmentUpdate(departmentId, name, budget, startDate, instructorId, rowVersionOriginal, out procResult);
        }

        public List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, DateTime? startDate, int? instructorId, byte[] rowVersionOriginal, out int procResult)
        {
            var departmentIdParam = new SqlParameter { ParameterName = "@DepartmentID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = departmentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!departmentId.HasValue)
                departmentIdParam.Value = DBNull.Value;

            var nameParam = new SqlParameter { ParameterName = "@Name", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = DBNull.Value;

            var budgetParam = new SqlParameter { ParameterName = "@Budget", SqlDbType = SqlDbType.Money, Direction = ParameterDirection.Input, Value = budget.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!budget.HasValue)
                budgetParam.Value = DBNull.Value;

            var startDateParam = new SqlParameter { ParameterName = "@StartDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = DBNull.Value;

            var instructorIdParam = new SqlParameter { ParameterName = "@InstructorID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = instructorId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!instructorId.HasValue)
                instructorIdParam.Value = DBNull.Value;

            var rowVersionOriginalParam = new SqlParameter { ParameterName = "@RowVersion_Original", SqlDbType = SqlDbType.Timestamp, Direction = ParameterDirection.Input, Value = rowVersionOriginal };
            if (rowVersionOriginalParam.Value == null)
                rowVersionOriginalParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[Department_Update] @DepartmentID, @Name, @Budget, @StartDate, @InstructorID, @RowVersion_Original";
            var procResultData = Set<DepartmentUpdateReturnModel>()
                .FromSqlRaw(sqlCommand, departmentIdParam, nameParam, budgetParam, startDateParam, instructorIdParam, rowVersionOriginalParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<DepartmentUpdateReturnModel>> DepartmentUpdateAsync(int? departmentId, string name, decimal? budget, DateTime? startDate, int? instructorId, byte[] rowVersionOriginal)
        {
            var departmentIdParam = new SqlParameter { ParameterName = "@DepartmentID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = departmentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!departmentId.HasValue)
                departmentIdParam.Value = DBNull.Value;

            var nameParam = new SqlParameter { ParameterName = "@Name", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = DBNull.Value;

            var budgetParam = new SqlParameter { ParameterName = "@Budget", SqlDbType = SqlDbType.Money, Direction = ParameterDirection.Input, Value = budget.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!budget.HasValue)
                budgetParam.Value = DBNull.Value;

            var startDateParam = new SqlParameter { ParameterName = "@StartDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = DBNull.Value;

            var instructorIdParam = new SqlParameter { ParameterName = "@InstructorID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = instructorId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!instructorId.HasValue)
                instructorIdParam.Value = DBNull.Value;

            var rowVersionOriginalParam = new SqlParameter { ParameterName = "@RowVersion_Original", SqlDbType = SqlDbType.Timestamp, Direction = ParameterDirection.Input, Value = rowVersionOriginal };
            if (rowVersionOriginalParam.Value == null)
                rowVersionOriginalParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[Department_Update] @DepartmentID, @Name, @Budget, @StartDate, @InstructorID, @RowVersion_Original";
            var procResultData = await Set<DepartmentUpdateReturnModel>()
                .FromSqlRaw(sqlCommand, departmentIdParam, nameParam, budgetParam, startDateParam, instructorIdParam, rowVersionOriginalParam)
                .ToListAsync();

            return procResultData;
        }

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Course> Courses { get; set; } // Course
        public DbSet<CourseInstructor> CourseInstructors { get; set; } // CourseInstructor
        public DbSet<Department> Departments { get; set; } // Department
        public DbSet<Enrollment> Enrollments { get; set; } // Enrollment
        public DbSet<OfficeAssignment> OfficeAssignments { get; set; } // OfficeAssignment
        public DbSet<Person> People { get; set; } // Person
        public DbSet<VwCourseStudent> VwCourseStudents { get; set; } // vwCourseStudents
        public DbSet<VwCourseStudentCount> VwCourseStudentCounts { get; set; } // vwCourseStudentCount
        public DbSet<VwDepartmentCourseCount> VwDepartmentCourseCounts { get; set; } // vwDepartmentCourseCount

        public FakeMyDbContext()
        {
            _database = null;

            Courses = new FakeDbSet<Course>("CourseId");
            CourseInstructors = new FakeDbSet<CourseInstructor>("CourseId", "InstructorId");
            Departments = new FakeDbSet<Department>("DepartmentId");
            Enrollments = new FakeDbSet<Enrollment>("EnrollmentId");
            OfficeAssignments = new FakeDbSet<OfficeAssignment>("InstructorId");
            People = new FakeDbSet<Person>("Id");
            VwCourseStudents = new FakeDbSet<VwCourseStudent>();
            VwCourseStudentCounts = new FakeDbSet<VwCourseStudentCount>();
            VwDepartmentCourseCounts = new FakeDbSet<VwDepartmentCourseCount>();

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        // Stored Procedures

        public int DepartmentDelete(int? departmentId, byte[] rowVersionOriginal)
        {
            return 0;
        }

        // DepartmentDeleteAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public DbSet<DepartmentInsertReturnModel> DepartmentInsertReturnModel { get; set; }
        public List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, DateTime? startDate, int? instructorId)
        {
            int procResult;
            return DepartmentInsert(name, budget, startDate, instructorId, out procResult);
        }

        public List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, DateTime? startDate, int? instructorId, out int procResult)
        {
            procResult = 0;
            return new List<DepartmentInsertReturnModel>();
        }

        public Task<List<DepartmentInsertReturnModel>> DepartmentInsertAsync(string name, decimal? budget, DateTime? startDate, int? instructorId)
        {
            int procResult;
            return Task.FromResult(DepartmentInsert(name, budget, startDate, instructorId, out procResult));
        }

        public DbSet<DepartmentUpdateReturnModel> DepartmentUpdateReturnModel { get; set; }
        public List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, DateTime? startDate, int? instructorId, byte[] rowVersionOriginal)
        {
            int procResult;
            return DepartmentUpdate(departmentId, name, budget, startDate, instructorId, rowVersionOriginal, out procResult);
        }

        public List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, DateTime? startDate, int? instructorId, byte[] rowVersionOriginal, out int procResult)
        {
            procResult = 0;
            return new List<DepartmentUpdateReturnModel>();
        }

        public Task<List<DepartmentUpdateReturnModel>> DepartmentUpdateAsync(int? departmentId, string name, decimal? budget, DateTime? startDate, int? instructorId, byte[] rowVersionOriginal)
        {
            int procResult;
            return Task.FromResult(DepartmentUpdate(departmentId, name, budget, startDate, instructorId, rowVersionOriginal, out procResult));
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

    }

    public class FakeDbAsyncQueryProvider<TEntity> : IAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = new CancellationToken())
        {
            return _inner.Execute<TResult>(expression);
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public IEnumerator<T> GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }
        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    #endregion

    #region POCO classes

    // Course
    public class Course
    {
        public int CourseId { get; set; } // CourseID (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Credits { get; set; } // Credits
        public int DepartmentId { get; set; } // DepartmentID

        // Reverse navigation

        /// <summary>
        /// Child CourseInstructors where [CourseInstructor].[CourseID] point to this entity (FK_dbo.CourseInstructor_dbo.Course_CourseID)
        /// </summary>
        public virtual ICollection<CourseInstructor> CourseInstructors { get; set; } // CourseInstructor.FK_dbo.CourseInstructor_dbo.Course_CourseID

        /// <summary>
        /// Child Enrollments where [Enrollment].[CourseID] point to this entity (FK_dbo.Enrollment_dbo.Course_CourseID)
        /// </summary>
        public virtual ICollection<Enrollment> Enrollments { get; set; } // Enrollment.FK_dbo.Enrollment_dbo.Course_CourseID

        // Foreign keys

        /// <summary>
        /// Parent Department pointed by [Course].([DepartmentId]) (FK_dbo.Course_dbo.Department_DepartmentID)
        /// </summary>
        public virtual Department Department { get; set; } // FK_dbo.Course_dbo.Department_DepartmentID

        public Course()
        {
            DepartmentId = 1;
            CourseInstructors = new List<CourseInstructor>();
            Enrollments = new List<Enrollment>();
        }
    }

    // CourseInstructor
    public class CourseInstructor
    {
        public int CourseId { get; set; } // CourseID (Primary key)
        public int InstructorId { get; set; } // InstructorID (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseInstructor].([CourseId]) (FK_dbo.CourseInstructor_dbo.Course_CourseID)
        /// </summary>
        public virtual Course Course { get; set; } // FK_dbo.CourseInstructor_dbo.Course_CourseID

        /// <summary>
        /// Parent Person pointed by [CourseInstructor].([InstructorId]) (FK_dbo.CourseInstructor_dbo.Instructor_InstructorID)
        /// </summary>
        public virtual Person Person { get; set; } // FK_dbo.CourseInstructor_dbo.Instructor_InstructorID
    }

    // Department
    public class Department
    {
        public int DepartmentId { get; set; } // DepartmentID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public decimal Budget { get; set; } // Budget
        public DateTime StartDate { get; set; } // StartDate
        public int? InstructorId { get; set; } // InstructorID
        public byte[] RowVersion { get; set; } // RowVersion (length: 8)

        // Reverse navigation

        /// <summary>
        /// Child Courses where [Course].[DepartmentID] point to this entity (FK_dbo.Course_dbo.Department_DepartmentID)
        /// </summary>
        public virtual ICollection<Course> Courses { get; set; } // Course.FK_dbo.Course_dbo.Department_DepartmentID

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [Department].([InstructorId]) (FK_dbo.Department_dbo.Instructor_InstructorID)
        /// </summary>
        public virtual Person Person { get; set; } // FK_dbo.Department_dbo.Instructor_InstructorID

        public Department()
        {
            Courses = new List<Course>();
        }
    }

    // Enrollment
    public class Enrollment
    {
        public int EnrollmentId { get; set; } // EnrollmentID (Primary key)
        public int CourseId { get; set; } // CourseID
        public int StudentId { get; set; } // StudentID
        public int? Grade { get; set; } // Grade

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [Enrollment].([CourseId]) (FK_dbo.Enrollment_dbo.Course_CourseID)
        /// </summary>
        public virtual Course Course { get; set; } // FK_dbo.Enrollment_dbo.Course_CourseID

        /// <summary>
        /// Parent Person pointed by [Enrollment].([StudentId]) (FK_dbo.Enrollment_dbo.Person_StudentID)
        /// </summary>
        public virtual Person Person { get; set; } // FK_dbo.Enrollment_dbo.Person_StudentID
    }

    // OfficeAssignment
    public class OfficeAssignment
    {
        public int InstructorId { get; set; } // InstructorID (Primary key)
        public string Location { get; set; } // Location (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [OfficeAssignment].([InstructorId]) (FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID)
        /// </summary>
        public virtual Person Person { get; set; } // FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID
    }

    // Person
    public class Person
    {
        public int Id { get; set; } // ID (Primary key)
        public string LastName { get; set; } // LastName (length: 50)
        public string FirstName { get; set; } // FirstName (length: 50)
        public DateTime? HireDate { get; set; } // HireDate
        public DateTime? EnrollmentDate { get; set; } // EnrollmentDate
        public string Discriminator { get; set; } // Discriminator (length: 128)

        // Reverse navigation

        /// <summary>
        /// Child CourseInstructors where [CourseInstructor].[InstructorID] point to this entity (FK_dbo.CourseInstructor_dbo.Instructor_InstructorID)
        /// </summary>
        public virtual ICollection<CourseInstructor> CourseInstructors { get; set; } // CourseInstructor.FK_dbo.CourseInstructor_dbo.Instructor_InstructorID

        /// <summary>
        /// Child Departments where [Department].[InstructorID] point to this entity (FK_dbo.Department_dbo.Instructor_InstructorID)
        /// </summary>
        public virtual ICollection<Department> Departments { get; set; } // Department.FK_dbo.Department_dbo.Instructor_InstructorID

        /// <summary>
        /// Child Enrollments where [Enrollment].[StudentID] point to this entity (FK_dbo.Enrollment_dbo.Person_StudentID)
        /// </summary>
        public virtual ICollection<Enrollment> Enrollments { get; set; } // Enrollment.FK_dbo.Enrollment_dbo.Person_StudentID

        /// <summary>
        /// Parent (One-to-One) Person pointed by [OfficeAssignment].[InstructorID] (FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID)
        /// </summary>
        public virtual OfficeAssignment OfficeAssignment { get; set; } // OfficeAssignment.FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID

        public Person()
        {
            Discriminator = "Instructor";
            CourseInstructors = new List<CourseInstructor>();
            Departments = new List<Department>();
            Enrollments = new List<Enrollment>();
        }
    }

    // vwCourseStudents
    public class VwCourseStudent
    {
        public int? DepartmentId { get; set; } // DepartmentID
        public string DepartmentName { get; set; } // DepartmentName (length: 50)
        public int CourseId { get; set; } // CourseID
        public string CourseTitle { get; set; } // CourseTitle (length: 50)
        public int? StudentId { get; set; } // StudentID
        public string StudentName { get; set; } // StudentName (length: 101)
    }

    // vwCourseStudentCount
    public class VwCourseStudentCount
    {
        public int? DepartmentId { get; set; } // DepartmentID
        public string Name { get; set; } // Name (length: 50)
        public int CourseId { get; set; } // CourseID
        public string Title { get; set; } // Title (length: 50)
        public int? StudentCount { get; set; } // StudentCount
    }

    // vwDepartmentCourseCount
    public class VwDepartmentCourseCount
    {
        public int DepartmentId { get; set; } // DepartmentID
        public string Name { get; set; } // Name (length: 50)
        public int? CourseCount { get; set; } // CourseCount
    }


    #endregion

    #region POCO Configuration

    // Course
    public class CourseConfiguration : IEntityTypeConfiguration<Course>
    {
        public void Configure(EntityTypeBuilder<Course> builder)
        {
            builder.ToTable("Course", "dbo");
            builder.HasKey(x => x.CourseId).HasName("PK_dbo.Course").IsClustered();
            builder.HasAlternateKey(x => x.DepartmentId).HasName("IX_DepartmentID");

            builder.Property(x => x.CourseId).HasColumnName(@"CourseID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Credits).HasColumnName(@"Credits").HasColumnType("int").IsRequired();
            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Department).WithMany(b => b.Courses).HasForeignKey(c => c.DepartmentId).HasConstraintName("FK_dbo.Course_dbo.Department_DepartmentID");
        }
    }

    // CourseInstructor
    public class CourseInstructorConfiguration : IEntityTypeConfiguration<CourseInstructor>
    {
        public void Configure(EntityTypeBuilder<CourseInstructor> builder)
        {
            builder.ToTable("CourseInstructor", "dbo");
            builder.HasKey(x => new { x.CourseId, x.InstructorId }).HasName("PK_dbo.CourseInstructor").IsClustered();
            builder.HasAlternateKey(x => x.CourseId).HasName("IX_CourseID");
            builder.HasAlternateKey(x => x.InstructorId).HasName("IX_InstructorID");

            builder.Property(x => x.CourseId).HasColumnName(@"CourseID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.InstructorId).HasColumnName(@"InstructorID").HasColumnType("int").IsRequired().ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.Course).WithMany(b => b.CourseInstructors).HasForeignKey(c => c.CourseId).HasConstraintName("FK_dbo.CourseInstructor_dbo.Course_CourseID");
            builder.HasOne(a => a.Person).WithMany(b => b.CourseInstructors).HasForeignKey(c => c.InstructorId).HasConstraintName("FK_dbo.CourseInstructor_dbo.Instructor_InstructorID");
        }
    }

    // Department
    public class DepartmentConfiguration : IEntityTypeConfiguration<Department>
    {
        public void Configure(EntityTypeBuilder<Department> builder)
        {
            builder.ToTable("Department", "dbo");
            builder.HasKey(x => x.DepartmentId).HasName("PK_dbo.Department").IsClustered();

            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Budget).HasColumnName(@"Budget").HasColumnType("money").IsRequired();
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.InstructorId).HasColumnName(@"InstructorID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion();

            // Foreign keys
            builder.HasOne(a => a.Person).WithMany(b => b.Departments).HasForeignKey(c => c.InstructorId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_dbo.Department_dbo.Instructor_InstructorID");

            builder.HasIndex(x => x.InstructorId).HasName("IX_InstructorID");
        }
    }

    // Enrollment
    public class EnrollmentConfiguration : IEntityTypeConfiguration<Enrollment>
    {
        public void Configure(EntityTypeBuilder<Enrollment> builder)
        {
            builder.ToTable("Enrollment", "dbo");
            builder.HasKey(x => x.EnrollmentId).HasName("PK_dbo.Enrollment").IsClustered();
            builder.HasAlternateKey(x => x.CourseId).HasName("IX_CourseID");
            builder.HasAlternateKey(x => x.StudentId).HasName("IX_StudentID");

            builder.Property(x => x.EnrollmentId).HasColumnName(@"EnrollmentID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CourseId).HasColumnName(@"CourseID").HasColumnType("int").IsRequired();
            builder.Property(x => x.StudentId).HasColumnName(@"StudentID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Grade).HasColumnName(@"Grade").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Course).WithMany(b => b.Enrollments).HasForeignKey(c => c.CourseId).HasConstraintName("FK_dbo.Enrollment_dbo.Course_CourseID");
            builder.HasOne(a => a.Person).WithMany(b => b.Enrollments).HasForeignKey(c => c.StudentId).HasConstraintName("FK_dbo.Enrollment_dbo.Person_StudentID");
        }
    }

    // OfficeAssignment
    public class OfficeAssignmentConfiguration : IEntityTypeConfiguration<OfficeAssignment>
    {
        public void Configure(EntityTypeBuilder<OfficeAssignment> builder)
        {
            builder.ToTable("OfficeAssignment", "dbo");
            builder.HasKey(x => x.InstructorId).HasName("PK_dbo.OfficeAssignment").IsClustered();
            builder.HasAlternateKey(x => x.InstructorId).HasName("IX_InstructorID");

            builder.Property(x => x.InstructorId).HasColumnName(@"InstructorID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Location).HasColumnName(@"Location").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.Person).WithOne(b => b.OfficeAssignment).HasForeignKey<OfficeAssignment>(c => c.InstructorId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID");
        }
    }

    // Person
    public class PersonConfiguration : IEntityTypeConfiguration<Person>
    {
        public void Configure(EntityTypeBuilder<Person> builder)
        {
            builder.ToTable("Person", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_dbo.Person").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            builder.Property(x => x.HireDate).HasColumnName(@"HireDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EnrollmentDate).HasColumnName(@"EnrollmentDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
        }
    }

    // vwCourseStudents
    public class VwCourseStudentConfiguration : IEntityTypeConfiguration<VwCourseStudent>
    {
        public void Configure(EntityTypeBuilder<VwCourseStudent> builder)
        {
            builder.ToView("vwCourseStudents", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CourseId).HasColumnName(@"CourseID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CourseTitle).HasColumnName(@"CourseTitle").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StudentId).HasColumnName(@"StudentID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StudentName).HasColumnName(@"StudentName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(101);
        }
    }

    // vwCourseStudentCount
    public class VwCourseStudentCountConfiguration : IEntityTypeConfiguration<VwCourseStudentCount>
    {
        public void Configure(EntityTypeBuilder<VwCourseStudentCount> builder)
        {
            builder.ToView("vwCourseStudentCount", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CourseId).HasColumnName(@"CourseID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.StudentCount).HasColumnName(@"StudentCount").HasColumnType("int").IsRequired(false);
        }
    }

    // vwDepartmentCourseCount
    public class VwDepartmentCourseCountConfiguration : IEntityTypeConfiguration<VwDepartmentCourseCount>
    {
        public void Configure(EntityTypeBuilder<VwDepartmentCourseCount> builder)
        {
            builder.ToView("vwDepartmentCourseCount", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CourseCount).HasColumnName(@"CourseCount").HasColumnType("int").IsRequired(false);
        }
    }


    #endregion

    #region Stored procedure return models

    public class DepartmentInsertReturnModel
    {
        public int DepartmentID { get; set; }
        public byte[] RowVersion { get; set; }
    }

    public class DepartmentUpdateReturnModel
    {
        public byte[] RowVersion { get; set; }
    }


    #endregion

}
// </auto-generated>

