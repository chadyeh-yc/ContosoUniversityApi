// <auto-generated />
using System;
using ContosoUniversityApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContosoUniversityApi.Migrations
{
    [DbContext(typeof(ContosoUniversityContext))]
    [Migration("20191213032950_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContosoUniversityApi.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CourseID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Credits")
                        .HasColumnName("Credits")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnName("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(50);

                    b.HasKey("CourseId")
                        .HasName("PK_dbo.Course")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasAlternateKey("DepartmentId")
                        .HasName("IX_DepartmentID");

                    b.ToTable("Course","dbo");
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.CourseInstructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnName("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnName("InstructorID")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "InstructorId")
                        .HasName("PK_dbo.CourseInstructor")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasAlternateKey("CourseId")
                        .HasName("IX_CourseID");

                    b.HasAlternateKey("InstructorId")
                        .HasName("IX_InstructorID");

                    b.ToTable("CourseInstructor","dbo");
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Budget")
                        .HasColumnName("Budget")
                        .HasColumnType("money");

                    b.Property<int?>("InstructorId")
                        .HasColumnName("InstructorID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("RowVersion")
                        .HasColumnType("timestamp")
                        .IsFixedLength(true)
                        .HasMaxLength(8);

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentId")
                        .HasName("PK_dbo.Department")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("InstructorId")
                        .HasName("IX_InstructorID");

                    b.ToTable("Department","dbo");
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.DepartmentInsertReturnModel", b =>
                {
                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.ToTable("DepartmentInsertReturnModel");
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.DepartmentUpdateReturnModel", b =>
                {
                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.ToTable("DepartmentUpdateReturnModel");
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EnrollmentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnName("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("Grade")
                        .HasColumnName("Grade")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnName("StudentID")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId")
                        .HasName("PK_dbo.Enrollment")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasAlternateKey("CourseId")
                        .HasName("IX_CourseID");

                    b.HasAlternateKey("StudentId")
                        .HasName("IX_StudentID");

                    b.ToTable("Enrollment","dbo");
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.OfficeAssignment", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnName("InstructorID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnName("Location")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(50);

                    b.HasKey("InstructorId")
                        .HasName("IX_InstructorID")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("OfficeAssignment","dbo");
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("Discriminator")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnName("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("HireDate")
                        .HasColumnName("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Person")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Person","dbo");
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.Course", b =>
                {
                    b.HasOne("ContosoUniversityApi.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_dbo.Course_dbo.Department_DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.CourseInstructor", b =>
                {
                    b.HasOne("ContosoUniversityApi.Models.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_dbo.CourseInstructor_dbo.Course_CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContosoUniversityApi.Models.Person", "Person")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_dbo.CourseInstructor_dbo.Instructor_InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.Department", b =>
                {
                    b.HasOne("ContosoUniversityApi.Models.Person", "Person")
                        .WithMany("Departments")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_dbo.Department_dbo.Instructor_InstructorID");
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.Enrollment", b =>
                {
                    b.HasOne("ContosoUniversityApi.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_dbo.Enrollment_dbo.Course_CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContosoUniversityApi.Models.Person", "Person")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_dbo.Enrollment_dbo.Person_StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContosoUniversityApi.Models.OfficeAssignment", b =>
                {
                    b.HasOne("ContosoUniversityApi.Models.Person", "Person")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("ContosoUniversityApi.Models.OfficeAssignment", "InstructorId")
                        .HasConstraintName("FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
